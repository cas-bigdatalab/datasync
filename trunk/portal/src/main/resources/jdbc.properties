ftpServerAddr=10.0.88.59
dataAssemblerHost=10.0.86.77
db.port=3306
db.url=jdbc:mysql://${dataAssemblerHost}:${db.port}/datasync?useUnicode=true&characterEncoding=utf8&UseSSL=false
db.username=root
db.password=123456
db.driver=com.mysql.jdbc.Driver
#用来检测连接是否有效的sql，如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用
druid.validationQuery=SELECT 1 FROM DUAL
#附加配置
druid.connectionProperties = zeroDateTimeBehavior=convertToNull;Unicode=true;characterEncoding=UTF-8;UseSSL=false
#初始化时建立物理连接的个数
druid.initialSize=3
#最大连接池数量
druid.maxActive=10
#最小连接池数量
druid.minIdle=3
#获取连接时最大等待时间，单位毫秒
druid.maxWait=10000
#连接的间隔时间，与testWhileIdle配合使用
druid.timeBetweenEvictionRunsMillis=60000
#Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接。
druid.minEvictableIdleTimeMillis=300000
#建议配置为true，不影响性能，并且保证安全性。检查闲置连接，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
druid.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
druid.testOnBorrow=true
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
druid.testOnReturn=false
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭
druid.poolPreparedStatements=false
#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
druid.maxPoolPreparedStatementPerConnectionSize=20
#是否自动回收超时连接
druid.removeAbandoned=true
#超时时间，以秒为单位
druid.removeAbandonedTimeout=1800
#是否在自动回收超时连接的时候打印连接的超时错误
druid.logAbandoned=true
#通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat，日志用的filter:log4j，防御sql注入的filter:wall
druid.filters=wall,stat